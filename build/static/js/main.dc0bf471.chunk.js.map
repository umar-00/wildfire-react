{"version":3,"sources":["components/LocationMarker.js","components/LocationInfoModal.js","components/Map.js","components/Loader/Loader.styles.js","components/Loader/Loader.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["LocationMarker","lat","lng","onClick","className","icon","locationIcon","LocationInfoModal","info","id","title","Map","eventData","center","zoom","useState","locationInfo","setLocationInfo","console","log","bootstrapURLKeys","key","defaultCenter","defaultZoom","map","event","categories","geometries","coordinates","defaultProps","Wrapper","styled","div","Spinner","Loader","Header","App","setEventData","loading","setLoading","useEffect","a","fetch","res","json","events","fetchEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAWeA,EARQ,SAAC,GAA0B,EAAxBC,IAAwB,EAAnBC,IAAoB,IAAfC,EAAc,EAAdA,QAClC,OACE,qBAAKC,UAAU,kBAAkBD,QAASA,EAA1C,SACE,cAAC,OAAD,CAAME,KAAMC,IAAcF,UAAU,qBCU3BG,EAhBW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC3B,OACE,sBAAKJ,UAAU,gBAAf,UACE,qDACA,+BACE,sCACM,iCAASI,EAAKC,QAEpB,yCACS,iCAASD,EAAKE,kBCJzBC,EAAM,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAChC,EAAwCC,mBAAS,MAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAIA,OAFAC,QAAQC,IAAIP,EAAU,IAGpB,sBAAKR,UAAU,MAAf,UACE,cAAC,IAAD,CACEgB,iBAAkB,CAAEC,IAAK,2CACzBC,cAAeT,EACfU,YAAaT,EAHf,SAKGF,EAAUY,KAAI,SAACC,GAAD,OACc,IAA3BA,EAAMC,WAAW,GAAGjB,GAClB,cAAC,EAAD,CAEER,IAAKwB,EAAME,WAAW,GAAGC,YAAY,GACrC1B,IAAKuB,EAAME,WAAW,GAAGC,YAAY,GACrCzB,QAAS,kBACPc,EAAgB,CAAER,GAAIgB,EAAMhB,GAAIC,MAAOe,EAAMf,UAJ1Ce,EAAMhB,IAOX,UAGPO,GAAgB,cAAC,EAAD,CAAmBR,KAAMQ,QAKhDL,EAAIkB,aAAe,CACjBhB,OAAQ,CACNZ,IAAK,QACLC,IAAK,QAEPY,KAAM,GAGOH,I,IAAAA,I,gBCzCFmB,EAAUC,IAAOC,IAAV,mJAQPC,EAAUF,IAAOC,IAAV,8cCCLE,EATA,WACb,OACE,eAACJ,EAAD,WACE,cAACG,EAAD,IACA,mDCQSE,EAXA,WACb,OACE,wBAAQ/B,UAAU,SAAlB,SACE,+BACE,cAAC,OAAD,CAAMA,UAAU,cAAcC,KAAMC,MADtC,4CC4BS8B,MA7Bf,WACE,MAAkCrB,mBAAS,IAA3C,mBAAOH,EAAP,KAAkByB,EAAlB,KACA,EAA8BtB,mBAAS,IAAvC,mBAAOuB,EAAP,KAAgBC,EAAhB,KAmBA,OAjBAC,qBAAU,YACS,uCAAG,gCAAAC,EAAA,6DAClBF,GAAW,GADO,SAEAG,MAChB,mDAHgB,cAEZC,EAFY,gBAKOA,EAAIC,OALX,gBAKVC,EALU,EAKVA,OAERR,EAAaQ,GACbN,GAAW,GARO,4CAAH,qDAWjBO,KACC,IAKD,gCACE,cAAC,EAAD,IACA,8BAAOR,EAA0C,cAAC,EAAD,IAAhC,cAAC,EAAD,CAAK1B,UAAWA,UCjBxBmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dc0bf471.chunk.js","sourcesContent":["import { Icon } from \"@iconify/react\";\r\nimport locationIcon from \"@iconify/icons-mdi/fire-alert\";\r\n\r\nconst LocationMarker = ({ lat, lng, onClick }) => {\r\n  return (\r\n    <div className=\"location-marker\" onClick={onClick}>\r\n      <Icon icon={locationIcon} className=\"location-icon\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LocationMarker;\r\n","const LocationInfoModal = ({ info }) => {\r\n  return (\r\n    <div className=\"location-info\">\r\n      <h2>Event location info</h2>\r\n      <ul>\r\n        <li>\r\n          ID: <strong>{info.id}</strong>\r\n        </li>\r\n        <li>\r\n          TITLE: <strong>{info.title}</strong>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LocationInfoModal;\r\n","import { useState } from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport LocationMarker from \"./LocationMarker\";\r\nimport LocationInfoModal from \"./LocationInfoModal\";\r\n\r\nconst Map = ({ eventData, center, zoom }) => {\r\n  const [locationInfo, setLocationInfo] = useState(null);\r\n\r\n  console.log(eventData[0]);\r\n\r\n  return (\r\n    <div className=\"map\">\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: \"AIzaSyA2tNwWfXkysXss4JleY7SX1SaZJbK93Bc\" }}\r\n        defaultCenter={center}\r\n        defaultZoom={zoom}\r\n      >\r\n        {eventData.map((event) =>\r\n          event.categories[0].id === 8 ? (\r\n            <LocationMarker\r\n              key={event.id}\r\n              lat={event.geometries[0].coordinates[1]}\r\n              lng={event.geometries[0].coordinates[0]}\r\n              onClick={() =>\r\n                setLocationInfo({ id: event.id, title: event.title })\r\n              }\r\n            />\r\n          ) : null\r\n        )}\r\n      </GoogleMapReact>\r\n      {locationInfo && <LocationInfoModal info={locationInfo} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nMap.defaultProps = {\r\n  center: {\r\n    lat: 53.0793,\r\n    lng: 8.8017,\r\n  },\r\n  zoom: 4,\r\n};\r\n\r\nexport default Map;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-height: 100vh;\r\n`;\r\n\r\nexport const Spinner = styled.div`\r\n  border: 5px solid #b8b8b8;\r\n  border-top: 5px solid black;\r\n  border-radius: 50%;\r\n  width: 50px;\r\n  height: 50px;\r\n  /* margin: 0 auto; */\r\n  background: white;\r\n\r\n  /* position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  margin: auto; */\r\n\r\n  animation: spin 1s linear infinite;\r\n\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","import { Wrapper, Spinner } from \"./Loader.styles\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Spinner></Spinner>\r\n      <h1>Fetching Data</h1>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import { Icon } from \"@iconify/react\";\r\nimport locationIcon from \"@iconify/icons-mdi/fire-alert\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>\r\n        <Icon className=\"header-icon\" icon={locationIcon} /> Wildfire Tracker\r\n        (Powered by NASA)\r\n      </h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from \"react\";\nimport Map from \"./components/Map\";\nimport Loader from \"./components/Loader/Loader\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  const [eventData, setEventData] = useState([]);\n  const [loading, setLoading] = useState([]);\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      setLoading(true);\n      const res = await fetch(\n        \"https://eonet.sci.gsfc.nasa.gov/api/v2.1/events\"\n      );\n      const { events } = await res.json();\n\n      setEventData(events);\n      setLoading(false);\n    };\n\n    fetchEvents();\n  }, []);\n\n  // console.log(eventData);\n\n  return (\n    <div>\n      <Header />\n      <div>{!loading ? <Map eventData={eventData} /> : <Loader />}</div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}